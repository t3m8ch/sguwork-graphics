#pragma once
#include <vector>

namespace Kudyakov {
	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;

	enum class Animal { Hare, Lion };

	std::vector<float> hare_lines = {  // голова
		0.5f,3.f,1.f,4.5f, // от левой щеки вверх до уха  
		1.f,4.5f,0.5f,6.f, // левое ухо слева снизу вверх
		0.5f,6.f,0.5f, 7.5f, // левое ухо слева  
		0.5f, 7.5f,1.f,8.f, // левое ухо верх слева
		1.f,8.f,1.5f,8.f, // левое ухо верх середина  
		1.5f,8.f,2.f,7.5f, // левое ухо верх справа
		2.f,7.5f,1.5f, 6.f, // левое ухо справа сверху вниз  
		1.5f, 6.f,1.5f,4.5f, // левое ухо справа до макушки
		1.5f,4.5f,3.f,4.5f, // макушка  
		3.f,4.5f,3.f,6.f, // правое ухо слева снизу вверх
		3.f,6.f,2.5f,7.5f, // правое ухо слева  
		2.5f,7.5f,3.f,8.f, // правое ухо верх слева
		3.f,8.f,3.5f,8.f, // правое ухо верх середина 
		3.5f,8.f,4.f,7.5f, // правое ухо верх справа
		4.f,7.5f,4.f,6.f, // правое ухо сверху вниз  
		4.f,6.f,3.5f,4.5f, // правое ухо справа
		3.5f,4.5f,4.f,3.f, // от правого уха вниз до щеки  
		4.f,3.f,3.5f,1.5f, // правая скула
		3.5f,1.5f,2.5f,1.f, // подбородок справа  
		2.5f,1.f,2.f,1.f, // подбородок снизу
		2.f,1.f,1.f,1.5f, // подбородок слева  
		1.f,1.5f,0.5f,3.f, // левая скула
		// туловище  
		4.f,3.f,5.5f,3.5f, // спина от головы вправо
		5.5f,3.5f,7.f,3.5f, // спина верх  
		7.f,3.5f,7.5f,2.5f, // спина сверху до хвоста
		7.5f,2.5f,8.f,2.5f, // хвост сверху  
		8.f,2.5f,8.f,2.f, // хвост справа
		8.f,2.f,7.5f,2.f, // хвост низ справа налево  
		7.5f,2.f,7.5f,0.5f, // задняя нога справа сверху вниз
		7.5f,0.5f,6.5f,0.5f, // задняя нога низ  
		6.5f,0.5f,6.5f,1.f, // задняя нога слева
		6.5f,1.f,6.f,1.f, // между задних ног  
		6.f,1.f,6.f,0.5f, // левая задняя нога справа
		6.f,0.5f,5.f,0.5f, // левая задняя нога низ  
		5.f,0.5f,5.f,1.f, // левая задняя нога слева
		5.f,1.f,4.f,1.f, // между задними и передними ногами  
		4.f,1.f,4.f,0.5f, // правая передняя нога справа
		4.f,0.5f,3.f,0.5f, // правая передняя нога низ 
		3.f,0.5f,3.f,1.f, // правая передняя нога слева
		3.f,1.f,2.5f,1.f, // между передних ног  
		2.5f,1.f,2.5f,0.5f, // передняя нога справа
		2.5f,0.5f,1.5f,0.5f, // передняя нога низ  
		1.5f,0.5f,1.5f,1.25f, // передняя нога слева
		// левый глаз
		1.5f,3.5f,1.5f,3.f, // левый глаз слева сверху вниз  
		1.5f,3.f,2.f,3.f, // левый глаз низ
		2.f, 3.f,2.f,3.5f, // левый глаз справа  
		2.f,3.5f,1.5f,3.5f, // левый глаз верх
		// правый глаз  
		2.5f,3.5f,2.5f,3.f, // правый глаз слева
		2.5f,3.f,3.f, 3.f, // правый глаз снизу  
		3.f,3.f,3.f,3.5f, // правый глаз справа
		3.f,3.5f,2.5f,3.5f, // правый глаз сверху  
		// ушные раковины
		1.f,5.5f,1.f,7.f, // левая ушная раковина  
		3.5f,5.5f,3.5f,7.f, // правая ушная раковина
		// нос  
		2.f,2.5f,2.5f,2.5f, // нос сверху
		2.5f,2.5f,2.25f,2.f, // нос справа  
		2.25f,2.f,2.f,2.5f // нос слева
	};
	float hare_vx = 8.5f;
	float hare_vy = 8.5f;

	std::vector<float> lion_lines = {  
		// Левая нога
		4.5f, 1.0f, 4.0f, 0.5f,  
		4.0f, 0.5f, 2.0f, 0.5f,
		2.0f, 0.5f, 1.5f, 1.5f,  
		1.5f, 1.5f, 1.5f, 3.5f,
		1.5f, 3.5f, 2.0f, 4.0f,  
		2.0f, 4.0f, 3.5f, 4.0f,
		3.5f, 4.0f, 4.0f, 3.0f,  
		4.0f, 3.0f, 3.5f, 1.0f,

		// От левой ноги до левой руки
		2.0f, 4.0f, 2.5f, 4.5f,

		// Пятка левой ноги
		2.5f, 1.5f, 2.0f, 2.0f,  
		2.0f, 2.0f, 2.0f, 3.0f,
		2.0f, 3.0f, 2.5f, 3.5f,
		2.5f, 3.5f, 3.0f, 3.0f,  
		3.0f, 3.0f, 3.0f, 2.0f,
		3.0f, 2.0f, 2.5f, 1.5f,

		// Правая нога  
		5.5f, 1.0f, 6.0f, 0.5f, 
		6.0f, 0.5f, 8.0f, 0.5f,  
		8.0f, 0.5f, 8.5f, 1.5f,
		8.5f, 1.5f, 8.5f, 3.5f,  
		8.5f, 3.5f, 8.0f, 4.0f,
		8.0f, 4.0f, 6.5f, 4.0f,  
		6.5f, 4.0f, 6.0f, 3.0f,
		6.0f, 3.0f, 6.5f, 1.0f,

		// От правой ноги до правой руки  
		8.0f, 4.0f, 7.5f, 4.5f,

		// Пятка правой ноги
		7.5f, 1.5f, 7.0f, 2.0f,  
		7.0f, 2.0f, 7.0f, 3.0f,
		7.0f, 3.0f, 7.5f, 3.5f,  
		7.5f, 3.5f, 8.0f, 3.0f,
		8.0f, 3.0f, 8.0f, 2.0f,  
		8.0f, 2.0f, 7.5f, 1.5f,

		// Контур какой-то еды
		4.0f, 1.0f, 6.0f, 1.0f,  
		4.0f, 1.0f, 4.0f - (3.0f / 8.0f), 1.0f + (3.0f / 8.0f),
		6.0f, 1.0f, 6.0f + (3.0f / 8.0f), 1.0f + (3.0f / 8.0f),  
		3.0f, 4.0f, 3.0f, 4.5f,
		7.0f, 4.0f, 7.0f, 4.5f,  
		4.5f, 5.5f, 5.5f, 5.5f,

		// Левая рука
		2.5f, 4.5f, 1.5f, 7.0f,  
		1.5f, 7.0f, 2.5f, 8.0f,
		3.0f, 6.5f, 4.0f, 6.5f,  
		4.0f, 6.5f, 4.5f, 6.0f,
		4.5f, 6.0f, 4.5f, 5.0f,  
		4.5f, 5.0f, 4.0f, 4.5f,
		4.0f, 4.5f, 2.5f, 4.5f,
		3.0f, 6.5f, 2.5f, 5.5f,

		// Пальцы левой руке
		4.0f, 5.0f, 4.5f, 5.0f,  
		4.0f, 5.5f, 4.5f, 5.5f,
		4.0f, 6.0f, 4.5f, 6.0f,

		// Правая рука
		5.5f, 5.0f, 6.0f, 4.5f,
		6.0f, 4.5f, 7.5f, 4.5f,
		7.5f, 4.5f, 8.5f, 7.0f,
		8.5f, 7.0f, 7.5f, 8.0f,

		// Пальцы правой руке  
		7.5f, 5.5f, 7.0f, 6.5f,
		7.0f, 6.5f, 6.0f, 6.5f,
		6.0f, 6.5f, 5.5f, 6.0f,
		5.5f, 6.0f, 5.5f, 5.0f,
		5.5f, 5.0f, 6.0f, 5.0f,
		5.5f, 5.5f, 6.0f, 5.5f,  
		5.5f, 6.0f, 6.0f, 6.0f,

		// Какие-то ромбики на какой-то еде
		5.0f, 1.0f, 5.5f, 1.5f,
		5.5f, 1.5f, 5.0f, 2.0f,
		5.0f, 2.0f, 4.5f, 1.5f,
		4.5f, 1.5f, 5.0f, 1.0f,

		4.0f, 2.0f, 4.0f - (3.0f / 16.0f), 2.0f + (3.0f / 16.0f),
		4.0f, 2.0f, 4.5f, 2.5f,
		4.5f, 2.5f, 4.0f, 3.0f,

		6.0f, 3.0f, 5.5f, 3.5f,
		5.5f, 3.5f, 6.0f, 4.0f,
		6.0f, 4.0f, 6.0f + (5.0f / 16.0f), 4.0f - (5.0f / 16.0f),

		4.5f, 3.5f, 4.0f, 4.0f,
		4.0f, 4.0f, 4.5f, 4.5f,
		4.5f, 4.5f, 5.0f, 4.0f,
		5.0f, 4.0f, 4.5f, 3.5f,

		5.5f, 4.5f, 5.0f, 5.0f,
		5.0f, 5.0f, 5.5f, 5.5f,
		5.5f, 4.5f, 5.5f + (4.0f / 16.0f), 4.5f + (4.0f / 16.0f),

		// Грива
		1.0f, 7.5f, 1.5, 9.0f,
		1.5f, 9.0f, 0.5f, 9.5f,
		0.5f, 9.5f, 1.5f, 10.5f,
		1.5f, 10.5f, 0.5f, 11.5f,
		0.5f, 11.5f, 2.0f, 12.0f,
		2.0f, 12.0f, 1.5f, 13.5f,
		1.5f, 13.5f, 3.0f, 12.5f,
		3.0f, 12.5f, 3.5f, 13.5f,
		3.5f, 13.5f, 4.5f, 12.5f,
		4.5f, 12.5f, 5.0f, 14.0f,
		5.0f, 14.0f, 5.5f, 12.5f,
		5.5f, 12.5f, 6.5f, 13.5f,
		6.5f, 13.5f, 7.0f, 12.5f,
		7.0f, 12.5f, 8.5f, 13.5f,
		8.5f, 13.5f, 8.0f, 12.0f,
		8.0f, 12.0f, 9.5f, 11.5f,
		9.5f, 11.5f, 8.5f, 10.5f,
		8.5f, 10.5f, 10.0f, 9.5f,
		10.0f, 9.5f, 8.5f, 9.0f,
		8.5f, 9.0f, 9.0f, 7.5f,
		9.0f, 7.5f, 7.5f, 8.0f,
		7.5f, 8.0f, 7.0f, 6.5f,
		7.0f, 6.5f, 6.0f, 7.5f,
		6.0f, 7.5f, 5.5f, 6.0f,
		5.5f, 6.0f, 5.0f, 7.0f,
		5.0f, 7.0f, 4.5f, 6.0f,
		4.5f, 6.0f, 4.0f, 7.5f,
		4.0f, 7.5f, 3.0f, 6.5f,
		3.0f, 6.5f, 2.5f, 8.0f,
		2.5f, 8.0f, 1.0f, 7.5f,

		// Усики
		4.0f, 9.0f, 2.0f, 10.0f,
		4.0f, 9.0f, 2.0f, 9.0f,
		4.0f, 9.0f, 2.5f, 8.5f,

		6.0f, 9.0f, 8.5f, 10.0f,
		6.0f, 9.0f, 8.0f, 9.0f,
		6.0f, 9.0f, 7.5f, 8.5f,

		// Борода
		5.0f, 7.5f, 3.5f, 8.0f,
		3.5f, 8.0f, 2.5f, 9.5f,
		2.5f, 9.5f, 2.5f, 10.5f,
		2.5f, 10.5f, 3.5f, 10.0f,
		3.5f, 10.0f, 6.5f, 10.0f,
		6.5f, 10.0f, 7.5f, 10.5f,
		7.5f, 10.5f, 7.5f, 9.5f,
		7.5f, 9.5f, 6.5f, 8.0f,
		6.5f, 8.0f, 5.0f, 7.5f,

		// Рот + нижняя часть бороды
		3.5f, 8.0f, 5.0f, 9.0f,
		5.0f, 9.0f, 6.5f, 8.0f,
		4.25f, 8.5f, 5.75f, 8.5f,
		4.25f, 8.5f, 5.0f, 8.0f,
		5.0f, 8.0f, 5.75f, 8.5f,

		// Ресницы
		3.5f, 10.0f, 3.5f, 11.5f,
		3.5f, 11.5f, 4.0f, 11.0f,
		4.0f, 11.0f, 4.5f, 12.0f,
		4.5f, 12.0f, 5.0f, 11.0f,
		5.0f, 11.0f, 5.5f, 12.0f,
		5.5f, 12.0f, 6.0f, 11.0f,
		6.0f, 11.0f, 6.5f, 11.5f,
		6.5f, 11.5f, 6.5f, 10.0f,

		// Левый глаз
		4.0f, 10.0f, 4.0f, 10.5f,
		4.0f, 10.5f, 4.5f, 11.0f,
		4.5f, 11.0f, 5.0f, 10.5f,

		// Левый зрачок
		4.25f, 10.0f, 4.25f, 10.5f,
		4.25f, 10.5f, 4.5f, 10.75f,
		4.5f, 10.75f, 4.75f, 10.5f,
		4.75f, 10.5f, 4.75f, 10.0f,

		// Правый глаз
		5.0f, 10.0f, 5.0f, 10.5f,
		5.0f, 10.5f, 5.5f, 11.0f,
		5.5f, 11.0f, 6.0f, 10.5f,
		6.0f, 10.5f, 6.0f, 10.0f,

		// Правый зрачок
		5.25f, 10.0f, 5.25f, 10.5f,
		5.25f, 10.5f, 5.5f, 10.75f,
		5.5f, 10.75f, 5.75f, 10.5f,
		5.75f, 10.5f, 5.75f, 10.0f,

		// Нос
		4.5f, 10.0f, 5.0f, 9.0f,
		5.0f, 9.0f, 5.5f, 10.0f,
	};
	float lion_vx = 10.5f; // размер рисунка по горизонтали 
	float lion_vy = 14.5f; // размер рисунка по вертикали

	System::Void drawPic(
		Graphics^ g, 
		Pen^ pen, 
		const std::vector<float>& lines, 
		float vx, 
		float vy, 
		float wx, 
		float wy, 
		bool keepAspectRatio
	) {
		float aspectForm = wx / wy;
		float aspectFig = vx / vy;
		float Sx, Sy;

		if (keepAspectRatio) 
		{
			Sx = Sy = aspectFig < aspectForm ? wy / vy : wx / vx;
		}
		else 
		{
			Sx = wx / vx;
			Sy = wy / vy;
		}

		float Ty = Sy * vy;

		for (int i = 0; i < lines.size(); i += 4) {
			g->DrawLine(
				pen,
				Sx * lines[i],
				Ty - Sy * lines[i + 1],
				Sx * lines[i + 2],
				Ty - Sy * lines[i + 3]
			);
		}
	}

	/// <summary>
	/// Сводка для MainForm
	/// </summary>
	public ref class MainForm : public System::Windows::Forms::Form
	{
	public:
		MainForm(void)
		{
			InitializeComponent();
			//
			//TODO: добавьте код конструктора
			//
		}

	protected:
		/// <summary>
		/// Освободить все используемые ресурсы.
		/// </summary>
		~MainForm()
		{
			if (components)
			{
				delete components;
			}
		}

	private:
		/// <summary>
		/// Обязательная переменная конструктора.
		/// </summary>
		System::ComponentModel::Container ^components;

#pragma region Windows Form Designer generated code
		/// <summary>
		/// Требуемый метод для поддержки конструктора — не изменяйте 
		/// содержимое этого метода с помощью редактора кода.
		/// </summary>
		void InitializeComponent(void)
		{
			this->SuspendLayout();
			// 
			// MainForm
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(6, 13);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->ClientSize = System::Drawing::Size(633, 743);
			this->DoubleBuffered = true;
			this->Name = L"MainForm";
			this->Text = L"MainForm";
			this->Load += gcnew System::EventHandler(this, &MainForm::MainForm_Load);
			this->Paint += gcnew System::Windows::Forms::PaintEventHandler(this, &MainForm::MainForm_Paint);
			this->KeyDown += gcnew System::Windows::Forms::KeyEventHandler(this, &MainForm::MainForm_KeyDown);
			this->Resize += gcnew System::EventHandler(this, &MainForm::MainForm_Resize);
			this->ResumeLayout(false);

		}
#pragma endregion
	private: bool keepAspectRatio;
	private: Animal animal;

	private: System::Void MainForm_Load(System::Object^ sender, System::EventArgs^ e) {
		keepAspectRatio = true;
		animal = Animal::Lion;
	}

	private: System::Void MainForm_Paint(System::Object^ sender, System::Windows::Forms::PaintEventArgs^ e) {
		Graphics^ g = e->Graphics;
		g->Clear(Color::Aquamarine);

		Pen^ blackPen = gcnew Pen(Color::Black, 2);

		float Wx = ClientRectangle.Width;
		float Wy = ClientRectangle.Height;

		switch (animal) {
		case Animal::Lion:
			drawPic(g, blackPen, lion_lines, lion_vx, lion_vy, Wx, Wy, keepAspectRatio);
			break;
		case Animal::Hare:
			drawPic(g, blackPen, hare_lines, hare_vx, hare_vy, Wx, Wy, keepAspectRatio);
			break;
		}
	}

	private: System::Void MainForm_Resize(System::Object^ sender, System::EventArgs^ e) {
		Refresh();
	}

	private: System::Void MainForm_KeyDown(System::Object^ sender, System::Windows::Forms::KeyEventArgs^ e) {
		switch (e->KeyCode) {
		case Keys::M:
			keepAspectRatio = !keepAspectRatio;
			break;
		case Keys::N:
			animal = static_cast<Animal>((static_cast<short>(animal) + 1) % 2);
			break;
		default:
			break;
		}
		Refresh();
	}
	};
}
